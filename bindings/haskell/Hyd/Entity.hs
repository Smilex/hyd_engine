-- GENERATED by C->Haskell Compiler, version 0.16.4 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "Entity.chs" #-}{-# LANGUAGE ForeignFunctionInterface #-}
{-# LANGUAGE TypeSynonymInstances #-}


{-# context lib="hyd" #-}

module Hyd.Entity where

import Foreign
import Foreign.C.Types
import Foreign.C.String
import Control.Monad
import Control.Applicative
import Data.Functor

import Hyd.Sprite

data HydEntity = HydEntity
	{ spr'hyd_ent :: Ptr (HydSprite)
	, name'hyd_ent :: String
	, parent'hyd_ent :: Ptr (HydEntity)
	}
instance Storable HydEntity where
	sizeOf _ = 96
{-# LINE 25 "Entity.chs" #-}
	alignment _ = 8
{-# LINE 26 "Entity.chs" #-}
	peek p = HydEntity
			<$> ((\ptr -> do {peekByteOff ptr 0 ::IO (Ptr ())}) p)
			<*> ((\ptr -> do {peekByteOff ptr 8 ::IO (Ptr CChar)}) p)
			<*> ((\ptr -> do {peekByteOff ptr 24 ::IO (Ptr ())}) p)
	poke p x = do
		(\ptr val -> do {pokeByteOff ptr 0 (val::(Ptr ()))}) p (spr'hyd_ent x)
		(\ptr val -> do {pokeByteOff ptr 8 (val::(Ptr CChar))}) p (name'hyd_ent x)
		(\ptr val -> do {pokeByteOff ptr 24 (val::(Ptr ()))}) p (parent'hyd_ent x)

type HydEntityPtr = Ptr (HydEntity)
{-# LINE 36 "Entity.chs" #-}

withT = with

hydEntCreate :: HydSprite -> String -> HydEntity -> IO (HydEntity)
hydEntCreate a1 a2 a3 =
  withT a1 $ \a1' -> 
  withCString a2 $ \a2' -> 
  withT a3 $ \a3' -> 
  hydEntCreate'_ a1' a2' a3' >>= \res ->
  withT res >>= \res' ->
  return (res')
{-# LINE 44 "Entity.chs" #-}

foreign import ccall safe "Entity.chs.h hyd_ent_create"
  hydEntCreate'_ :: ((Ptr ()) -> ((Ptr CChar) -> ((HydEntityPtr) -> (IO (HydEntityPtr)))))
