-- GENERATED by C->Haskell Compiler, version 0.16.4 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "Texture.chs" #-}{-# LANGUAGE ForeignFunctionInterface #-}
{-# LANGUAGE TypeSynonymInstances #-}


{-# context lib="hyd" #-}

module Hyd.Texture where

import Foreign
import Foreign.C.Types
import Foreign.C.String
import Control.Monad
import Control.Applicative
import Data.Functor

data HydTexture = HydTexture
	{ ptr'hyd_tex :: Ptr ()
	, name'hyd_tex :: Ptr (CChar)
	}
instance Storable HydTexture where
	sizeOf _ = 40
{-# LINE 22 "Texture.chs" #-}
	alignment _ = 8
{-# LINE 23 "Texture.chs" #-}
	peek p = HydTexture
			<$> ((\ptr -> do {peekByteOff ptr 0 ::IO (Ptr ())}) p)
			<*> ((\ptr -> do {peekByteOff ptr 16 ::IO (Ptr CChar)}) p)
	poke p x = do
		(\ptr val -> do {pokeByteOff ptr 0 (val::(Ptr ()))}) p (ptr'hyd_tex x)
		(\ptr val -> do {pokeByteOff ptr 16 (val::(Ptr CChar))}) p (name'hyd_tex x)

type HydTexturePtr = Ptr (HydTexture)
{-# LINE 31 "Texture.chs" #-}

withT = with

hydTexCreateFile :: String -> Ptr () -> IO (HydTexture)
hydTexCreateFile a1 a2 =
  withCString a1 $ \a1' -> 
  let {a2' = id a2} in 
  hydTexCreateFile'_ a1' a2' >>= \res ->
  withT res >>= \res' ->
  return (res')
{-# LINE 36 "Texture.chs" #-}

hydTexCopy :: HydTexture -> IO (HydTexture)
hydTexCopy a1 =
  withT a1 $ \a1' -> 
  hydTexCopy'_ a1' >>= \res ->
  withT res >>= \res' ->
  return (res')
{-# LINE 39 "Texture.chs" #-}

hydTexDestroy :: HydTexture -> IO ()
hydTexDestroy a1 =
  withT a1 $ \a1' -> 
  hydTexDestroy'_ a1' >>= \res ->
  return ()
{-# LINE 42 "Texture.chs" #-}

foreign import ccall safe "Texture.chs.h hyd_tex_create_file"
  hydTexCreateFile'_ :: ((Ptr CChar) -> ((Ptr ()) -> (IO (HydTexturePtr))))

foreign import ccall safe "Texture.chs.h hyd_tex_copy"
  hydTexCopy'_ :: ((HydTexturePtr) -> (IO (HydTexturePtr)))

foreign import ccall safe "Texture.chs.h hyd_tex_destroy"
  hydTexDestroy'_ :: ((HydTexturePtr) -> (IO ()))
