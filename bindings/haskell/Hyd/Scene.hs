-- GENERATED by C->Haskell Compiler, version 0.16.4 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "Scene.chs" #-}{-# LANGUAGE ForeignFunctionInterface #-}
{-# LANGUAGE TypeSynonymInstances #-}


{-# context lib="hyd" #-}

module Hyd.Scene where

import Foreign
import Foreign.C.Types
import Foreign.C.String
import Control.Monad
import Control.Applicative
import Data.Functor

data HydScene = HydScene
	{ {-#entities'hyd_scene :: Ptr ()
	, sprites'hyd_scene :: Ptr ()#-}
	}
instance Storable HydScene where
	sizeOf _ = 32
{-# LINE 22 "Scene.chs" #-}
	alignment _ = 8
{-# LINE 23 "Scene.chs" #-}
	peek p = HydScene
			{-#<$> ({#get hyd_scene->entities #} p)
			<*> ({#get hyd_scene->sprites #} p)#-}
	poke p x = do
		{-#{#set hyd_scene.entities #} p (entities'hyd_scene x)
		{#set hyd_scene.sprites #} p (sprites'hyd_scene x)#-}

type HydScenePtr = Ptr (HydScene)
{-# LINE 31 "Scene.chs" #-}

withT = with

hydSceneCreate :: IO (HydScene)
hydSceneCreate =
  hydSceneCreate'_ >>= \res ->
  withT res >>= \res' ->
  return (res')
{-# LINE 36 "Scene.chs" #-}

hydSceneCreateFile :: String -> Ptr () -> Ptr () -> IO (HydScene)
hydSceneCreateFile a1 a2 a3 =
  withCString a1 $ \a1' -> 
  let {a2' = id a2} in 
  let {a3' = id a3} in 
  hydSceneCreateFile'_ a1' a2' a3' >>= \res ->
  withT res >>= \res' ->
  return (res')
{-# LINE 42 "Scene.chs" #-}

hydSceneDestroy :: HydScene -> IO ()
hydSceneDestroy a1 =
  withT a1 $ \a1' -> 
  hydSceneDestroy'_ a1' >>= \res ->
  return ()
{-# LINE 45 "Scene.chs" #-}

hydSceneDraw :: HydScene -> Ptr () -> IO ()
hydSceneDraw a1 a2 =
  withT a1 $ \a1' -> 
  let {a2' = id a2} in 
  hydSceneDraw'_ a1' a2' >>= \res ->
  return ()
{-# LINE 48 "Scene.chs" #-}

foreign import ccall safe "Scene.chs.h hyd_scene_create"
  hydSceneCreate'_ :: (IO (HydScenePtr))

foreign import ccall safe "Scene.chs.h hyd_scene_create_file"
  hydSceneCreateFile'_ :: ((Ptr CChar) -> ((Ptr ()) -> ((Ptr ()) -> (IO (HydScenePtr)))))

foreign import ccall safe "Scene.chs.h hyd_scene_destroy"
  hydSceneDestroy'_ :: ((HydScenePtr) -> (IO ()))

foreign import ccall safe "Scene.chs.h hyd_scene_draw"
  hydSceneDraw'_ :: ((HydScenePtr) -> ((Ptr ()) -> (IO ())))
