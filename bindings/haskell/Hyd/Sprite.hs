-- GENERATED by C->Haskell Compiler, version 0.16.4 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "Sprite.chs" #-}{-# LANGUAGE ForeignFunctionInterface #-}
{-# LANGUAGE TypeSynonymInstances #-}


{-# context lib="hyd" #-}

module Hyd.Sprite where

import Foreign
import Foreign.C.Types
import Foreign.C.String
import Control.Monad
import Control.Applicative
import Data.Functor

import Hyd.Texture

data HydSprite = HydSprite
	{ tex'hyd_spr :: Ptr (HydTexture)
	, num_frames'hyd_spr :: Int
	, num_anims'hyd_spr :: Int
	}
instance Storable HydSprite where
	sizeOf _ = 48
{-# LINE 25 "Sprite.chs" #-}
	alignment _ = 8
{-# LINE 26 "Sprite.chs" #-}
	peek p = HydSprite
			<$> ((\ptr -> do {peekByteOff ptr 0 ::IO (Ptr ())}) p)
			<*> ((\ptr -> do {peekByteOff ptr 24 ::IO CUInt}) p)
			<*> ((\ptr -> do {peekByteOff ptr 28 ::IO CUInt}) p)
	poke p x = do
		(\ptr val -> do {pokeByteOff ptr 0 (val::(Ptr ()))}) p (tex'hyd_spr x)
		(\ptr val -> do {pokeByteOff ptr 24 (val::CUInt)}) p (num_frames'hyd_spr x)
		(\ptr val -> do {pokeByteOff ptr 28 (val::CUInt)}) p (num_anims'hyd_spr x)

type HydSpritePtr = Ptr (HydSprite)
{-# LINE 36 "Sprite.chs" #-}

withT = with

hydSprCreate :: HydTexture -> Ptr () -> Int -> Ptr () -> Int -> IO (HydSprite)
hydSprCreate a1 a2 a3 a4 a5 =
  withT a1 $ \a1' -> 
  let {a2' = id a2} in 
  let {a3' = fromIntegral a3} in 
  let {a4' = id a4} in 
  let {a5' = fromIntegral a5} in 
  hydSprCreate'_ a1' a2' a3' a4' a5' >>= \res ->
  withT res >>= \res' ->
  return (res')
{-# LINE 46 "Sprite.chs" #-}

hydSprCreateFile :: String -> Ptr () -> Ptr () -> IO (HydSprite)
hydSprCreateFile a1 a2 a3 =
  withCString a1 $ \a1' -> 
  let {a2' = id a2} in 
  let {a3' = id a3} in 
  hydSprCreateFile'_ a1' a2' a3' >>= \res ->
  withT res >>= \res' ->
  return (res')
{-# LINE 52 "Sprite.chs" #-}

hydSprDestroy :: HydSprite -> IO ()
hydSprDestroy a1 =
  withT a1 $ \a1' -> 
  hydSprDestroy'_ a1' >>= \res ->
  return ()
{-# LINE 55 "Sprite.chs" #-}

foreign import ccall safe "Sprite.chs.h hyd_spr_create"
  hydSprCreate'_ :: ((Ptr ()) -> ((Ptr (Ptr ())) -> (CUInt -> ((Ptr (Ptr ())) -> (CUInt -> (IO (HydSpritePtr)))))))

foreign import ccall safe "Sprite.chs.h hyd_spr_create_file"
  hydSprCreateFile'_ :: ((Ptr CChar) -> ((Ptr ()) -> ((Ptr ()) -> (IO (HydSpritePtr)))))

foreign import ccall safe "Sprite.chs.h hyd_spr_destroy"
  hydSprDestroy'_ :: ((HydSpritePtr) -> (IO ()))
